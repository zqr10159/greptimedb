searchState.loadedDescShard("cli", 0, "Command to benchmark table metadata operations.\nCommand for data operations including exporting data from …\nCommand for managing metadata operations, including saving …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommand to benchmark table metadata operations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommand for data operations including exporting data from …\nExport all table schemas and data at once.\nExport all table data, corresponding to <code>COPY DATABASE TO</code>.\nCommand for exporting data from the GreptimeDB.\nExport all table schemas, corresponding to …\nServer address to connect\nIterate over all db names.\nThe basic authentication for connecting to the server\nbuild operator with preference for file system\nBuilds the WITH options string for SQL commands, assuming …\nThe name of the catalog to export.\nif both <code>ddl_local_dir</code> and remote storage (s3/oss) are set, …\nA half-open time range: [start_time, end_time). The end of …\nParallelism of the export.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of <code>TableReference</code> to be exported. Includes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMask sensitive information in SQL commands for safe logging\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nif export data to oss\nThe oss access key id if oss is set, this is required\nThe oss access key secret if oss is set, this is required\nThe oss bucket name if oss is set, this is required\nThe oss endpoint if oss is set, this is required\nDirectory to put the exported data. E.g.: …\nThe proxy server address to connect, if set, will override …\nif export data to s3\nThe s3 access key if s3 is set, this is required\nThe s3 bucket name if s3 is set, this is required\nThe s3 endpoint if s3 is set, this is required\nThe s3 region if s3 is set, this is required\nif s3 is set, this is required\nThe s3 secret key if s3 is set, this is required\nA half-open time range: [start_time, end_time). The start …\nThings to export\nThe timeout of invoking the database.\nExport all table schemas and data at once.\nImport all table data into the database.\nCommand to import data from a directory into a GreptimeDB …\nImport all table schemas into the database.\nServer address to connect\nThe basic authentication for connecting to the server\nThe name of the catalog to import.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParallelism of the import.\nDirectory of the data. E.g.: /tmp/greptimedb-backup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax retry times for each job.\nDisable proxy server, if set, will not use any proxy.\nThe proxy server address to connect, if set, will override …\nThings to export\nThe timeout of invoking the database.\nSplit at <code>-</code>.\nExecute sql query.\nSNAFU context selector for the <code>Error::BuildCacheRegistry</code> …\nSNAFU context selector for the <code>Error::BuildClient</code> variant\nSNAFU context selector for the <code>Error::BuildRuntime</code> variant\nSNAFU context selector for the <code>Error::CacheRequired</code> variant\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::EmptyResult</code> variant\nSNAFU context selector for the <code>Error::EmptyStoreAddrs</code> …\nContains the error value\nSNAFU context selector for the <code>Error::FileIo</code> variant\nSNAFU context selector for the <code>Error::HttpQuerySql</code> variant\nSNAFU context selector for the <code>Error::IllegalConfig</code> variant\nSNAFU context selector for the <code>Error::InitBackend</code> variant\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InitTimezone</code> variant\nSNAFU context selector for the <code>Error::InitTlsProvider</code> …\nSNAFU context selector for the <code>Error::InvalidArguments</code> …\nSNAFU context selector for the <code>Error::InvalidFilePath</code> …\nSNAFU context selector for the <code>Error::LoadLayeredConfig</code> …\nSNAFU context selector for the <code>Error::MetaClientInit</code> …\nSNAFU context selector for the <code>Error::MissingConfig</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::OpenDal</code> variant\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::OutputDirNotSet</code> …\nSNAFU context selector for the <code>Error::ParseProxyOpts</code> …\nSNAFU context selector for the <code>Error::ParseSql</code> variant\nSNAFU context selector for the <code>Error::PlanStatement</code> variant\nSNAFU context selector for the <code>Error::S3ConfigNotSet</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SendRequestToDatanode</code>…\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SpawnThread</code> variant\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the <code>Error::TableMetadata</code> variant\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::Unexpected</code> variant\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nCommand for managing metadata operations, including saving …\nThe metadata store backend.\nBuilds a <code>KvBackendRef</code> from the store configuration.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe maximum number of operations in a transaction. Only …\nThe table name in RDS to store metadata. Only used when …\nThe endpoint of store. one of etcd, postgres or mysql.\nThe key prefix of the metadata store.\nThe prefix of the tombstone keys.\nSubcommand for deleting metadata from the metadata store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDelete key-value pairs logically from the metadata store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key to delete from the metadata store.\nDelete key-value pairs with the given prefix.\nDelete table metadata logically from the metadata store.\nThe catalog name of the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe schema name of the table.\nThe table id to delete from the metadata store.\nThe table name to delete from the metadata store.\nGetting metadata from metadata store.\nGet key-value pairs from the metadata store.\nGet table metadata from the metadata store via table id.\nThe catalog name of the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key to get from the metadata store.\nThe maximum number of key-value pairs to return. If 0, …\nWhether to perform a prefix query. If true, returns all …\nPretty print the output.\nThe schema name of the table.\nGet table metadata by table id.\nGet table metadata by table name.\nDecodes a key-value pair into a string.\nGets the table id by table name.\nFormats a value as a JSON string.\nRepair metadata of logical tables.\nThe catalog of the tables to repair.\nThe timeout for the client to connect to the datanode.\nThe timeout for the client to operate the datanode.\nWhether to fail fast if any repair operation fails.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe schema of the tables to repair.\nThe id of the table to repair.\nThe names of the tables to repair.\nGenerates alter table expression for all columns.\nMakes an alter region request for a peer.\nGenerates a <code>CreateTableExpr</code> from a <code>RawTableInfo</code>.\nMakes a create region request for a peer.\nExplore metadata from a snapshot.\nExplore metadata from a snapshot file.\nRestore metadata from a snapshot.\nRestore metadata from a snapshot file.\nSave a snapshot of the current metadata state to a …\nExport metadata snapshot tool. This tool is used to export …\nSubcommand for metadata snapshot operations, including …\nThe name of the target snapshot file. we will add the file …\nThe name of the target snapshot file.\nThe name of the target snapshot file. we will add the file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe directory to store the snapshot file.\nThe query string to filter the metadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit of the metadata to query.\nThe directory to store the snapshot file. if target output …\nwhether to use s3 as the output directory. default is …\nThe s3 access key.\nThe s3 bucket name.\nThe s3 config.\nThe s3 config.\nThe s3 config.\nThe s3 endpoint. we will automatically use the default s3 …\nThe s3 region.\nThe s3 secret key.\nThe store configuration.\nThe store configuration.\nThe full table metadata.\nThe input for the iterator.\nAn iterator for retrieving table metadata from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the full table name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the iterator into a stream of table metadata.\nReturns true if it’s a metric engine table.\nReturns true if it’s TableRouteValue::Physical.\nCreates a new iterator input from a list of table ids.\nCreates a new iterator input from a list of table names.\nReturns the next table metadata.")